use ::grammar;
use ::grammar::Token::*;
use ::token;
use ::token::Token::*;
use ::token::DelimToken::*;
use ::token::keywords::Keyword::*;

impl From<token::Token> for grammar::Token {
    fn from(t: token::Token) -> Self {
        match t {
            Plus => PLUS,
            Minus => MINUS,
            Star => STAR,
            Slash => SLASH,
            Percent => PERCENT,
            Caret => CARET,
            Pound => POUND,
            EqEq => EQEQ,
            Ne => NE,
            Le => LE,
            Ge => GE,
            Lt => LT,
            Gt => GT,
            Eq => EQ,
            Semi => SEMI,
            Colon => COLON,
            ColonColon => COLONCOLON,
            Comma => COMMA,
            Dot => DOT,
            DotDot => DOTDOT,
            DotDotDot => DOTDOTDOT,
            OpenDelim(d) => match d {
                Paren => OPENPAREN,
                Brace => OPENBRACE,
                Bracket => OPENBRACKET,
            },
            CloseDelim(d) => match d {
                Paren => CLOSEPAREN,
                Brace => CLOSEBRACE,
                Bracket => CLOSEBRACKET,
            },
            Keyword(k) => match k {
                And => AND,
                Break => BREAK,
                Do => DO,
                Else => ELSE,
                Elseif => ELSEIF,
                End => END,
                False => FALSE,
                For => FOR,
                Function => FUNCTION,
                Goto => GOTO,
                If => IF,
                In => IN,
                Local => LOCAL,
                Nil => NIL,
                Not => NOT,
                Or => OR,
                Repeat => REPEAT,
                Return => RETURN,
                Then => THEN,
                True => TRUE,
                Until => UNTIL,
                While => WHILE,
            },
            Ident(s) => NAME(s),
            Int(n) => NUMBER(n as f64),
            Num(n) => NUMBER(n),
            Str(s) => STRING(s),
            _ => EOI,
        }
    }
}

impl From<grammar::Token> for token::Token {
    fn from(t: grammar::Token) -> Self {
        match t {
            PLUS => Plus,
            MINUS => Minus,
            STAR => Star,
            SLASH => Slash,
            PERCENT => Percent,
            CARET => Caret,
            POUND => Pound,
            EQEQ => EqEq,
            NE => Ne,
            LE => Le,
            GE => Ge,
            LT => Lt,
            GT => Gt,
            EQ => Eq,
            SEMI => Semi,
            COLON => Colon,
            COLONCOLON => ColonColon,
            COMMA => Comma,
            COMMA2 => Comma,
            DOT => Dot,
            DOTDOT => DotDot,
            DOTDOTDOT => DotDotDot,
            OPENPAREN => OpenDelim(Paren),
            OPENPAREN2 => OpenDelim(Paren),
            OPENBRACE => OpenDelim(Brace),
            OPENBRACKET => OpenDelim(Bracket),
            CLOSEPAREN => CloseDelim(Paren),
            CLOSEBRACE => CloseDelim(Brace),
            CLOSEBRACKET => CloseDelim(Bracket),
            AND => Keyword(And),
            BREAK => Keyword(Break),
            DO => Keyword(Do),
            ELSE => Keyword(Else),
            ELSEIF => Keyword(Elseif),
            END => Keyword(End),
            FALSE => Keyword(False),
            FOR => Keyword(For),
            FUNCTION => Keyword(Function),
            GOTO => Keyword(Goto),
            IF => Keyword(If),
            IN => Keyword(In),
            LOCAL => Keyword(Local),
            NIL => Keyword(Nil),
            NOT => Keyword(Not),
            OR => Keyword(Or),
            REPEAT => Keyword(Repeat),
            RETURN => Keyword(Return),
            THEN => Keyword(Then),
            TRUE => Keyword(True),
            UNTIL => Keyword(Until),
            WHILE => Keyword(While),
            NAME(s) => Ident(s),
            NUMBER(n) => Num(n),
            STRING(s) => Str(s),
            EOI => Eof,
        }
    }
}
